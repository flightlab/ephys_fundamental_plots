[["index.html", "Fundamental plots for electrophysiological data Chapter 1 About Citation License", " Fundamental plots for electrophysiological data Vikram B. Baliga 2023-02-24 Chapter 1 About This site is a work in progress. Ultimately, it will provide a walkthrough on how to produce fundamental plots from electrophysiological data. The content was initialized using a bookdown template; accordingly, as this site remains in a developmental stage, content from the template may linger. The original content written here is intended to instruct trainees in the Altshuler Lab at the University of British Columbia to take raw recorded data from electrophysiological examinations and then produce preliminary plots that help characterize the recorded neural spike data. To get started, please use the left navigation and work through chapters in order.  Citation TBD License The content of this work is licensed under CC-BY. For details please see this web page or the LICENSE file in flightlab/ephys_fundamental_plots. "],["raw-data-and-spike-sorted-traces.html", "Chapter 2 Raw data and spike sorted traces 2.1 Including Plots", " Chapter 2 Raw data and spike sorted traces This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 2.1 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["data-wrangling.html", "Chapter 3 Data wrangling 3.1 Packages 3.2 %not_in% 3.3 Import example file and metadata", " Chapter 3 Data wrangling Once data have been spike sorted, we are ready to begin working in R. To get to a point where meaningful preliminary plots can be produced, a few things need to be addressed: Labeling the time series of spike &amp; photodiode data based on the stimulus that appears on screen (i.e., matching the log file to the data file). This includes labeling phases (like “blank”, “stationary”, and “moving”) along with experimental metadata such as SF, TF, and stimulus orientation (direction). Re-organizing the spike &amp; photodiode so that separate replicates of a stimulus run are uniquely labelled and then arranged together. Binning the data into 10- and 100-ms data sets, and then exporting CSVs of the unbinned, 10-ms-binned, and 100-ms-binned data. This will be highly useful for situations where you are handling multiple data files (e.g., from different recording days), in which case it is likely that your machine will not be able to store all objects in RAM. 3.1 Packages The packages listed below will be necessary at some point over the course of this book. I recommend installing them all now. The block of code below is designed to first check if each of the listed packages is already installed on your computer. If any are missing, then an attempt is made to install it from CRAN. Finally, all of the packages are loaded into the environment. ## Specify the packages you&#39;ll use in the script packages &lt;- c(&quot;tidyverse&quot;, &quot;readxl&quot;, &quot;zoo&quot;, &quot;gridExtra&quot;, &quot;R.matlab&quot;, &quot;cowplot&quot;, &quot;easystats&quot;, &quot;circular&quot;, &quot;splines&quot;, &quot;MESS&quot;, ## area under curve &quot;zoo&quot; ## rolling means ) ## Now for each package listed, first check to see if the package is already ## installed. If it is installed, it&#39;s simply loaded. If not, it&#39;s downloaded ## from CRAN and then installed and loaded. package.check &lt;- lapply(packages, FUN = function(x) { if (!require(x, character.only = TRUE)) { install.packages(x, dependencies = TRUE) library(x, character.only = TRUE) } } ) I will use the sessionInfo() command to detail the specific versions of packages I am using (along with other information about my R session). ## R version 4.2.0 (2022-04-22 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19045) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.utf8 ## [2] LC_CTYPE=English_United States.utf8 ## [3] LC_MONETARY=English_United States.utf8 ## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United States.utf8 ## ## attached base packages: ## [1] splines stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] MESS_0.5.9 circular_0.4-95 report_0.5.5 see_0.7.2 ## [5] correlation_0.8.2 modelbased_0.8.5 effectsize_0.7.0.5 parameters_0.18.2 ## [9] performance_0.9.2 bayestestR_0.12.1 datawizard_0.6.0 insight_0.18.2 ## [13] easystats_0.4.3 cowplot_1.1.1 R.matlab_3.6.2 gridExtra_2.3 ## [17] zoo_1.8-10 readxl_1.4.0 forcats_0.5.1 stringr_1.4.0 ## [21] dplyr_1.0.9 purrr_0.3.4 readr_2.1.2 tidyr_1.2.0 ## [25] tibble_3.1.7 ggplot2_3.4.0 tidyverse_1.3.2 ## ## loaded via a namespace (and not attached): ## [1] fs_1.5.2 lubridate_1.8.0 httr_1.4.3 ## [4] tools_4.2.0 backports_1.4.1 bslib_0.3.1 ## [7] utf8_1.2.2 R6_2.5.1 DBI_1.1.2 ## [10] colorspace_2.0-3 withr_2.5.0 tidyselect_1.1.2 ## [13] emmeans_1.7.5 compiler_4.2.0 cli_3.4.1 ## [16] rvest_1.0.2 xml2_1.3.3 sandwich_3.0-2 ## [19] bookdown_0.32 sass_0.4.1 mosaicCore_0.9.0 ## [22] scales_1.2.0 mvtnorm_1.1-3 ggridges_0.5.3 ## [25] digest_0.6.29 ggformula_0.10.1 rmarkdown_2.14.2 ## [28] R.utils_2.12.0 pkgconfig_2.0.3 htmltools_0.5.2 ## [31] labelled_2.9.1 geeM_0.10.1 dbplyr_2.2.0 ## [34] fastmap_1.1.0 highr_0.9 rlang_1.0.6 ## [37] rstudioapi_0.13 farver_2.1.0 jquerylib_0.1.4 ## [40] generics_0.1.2 jsonlite_1.8.0 R.oo_1.25.0 ## [43] googlesheets4_1.0.0 magrittr_2.0.3 Matrix_1.4-1 ## [46] Rcpp_1.0.8.3 munsell_0.5.0 fansi_1.0.3 ## [49] geepack_1.3.4 lifecycle_1.0.3 R.methodsS3_1.8.2 ## [52] stringi_1.7.6 multcomp_1.4-19 yaml_2.3.5 ## [55] MASS_7.3-56 ggstance_0.3.5 plyr_1.8.7 ## [58] grid_4.2.0 crayon_1.5.1 lattice_0.20-45 ## [61] haven_2.5.0 hms_1.1.1 knitr_1.39 ## [64] pillar_1.7.0 boot_1.3-28 estimability_1.3 ## [67] codetools_0.2-18 reprex_2.0.1 glue_1.6.2 ## [70] evaluate_0.15 modelr_0.1.8 tweenr_1.0.2 ## [73] vctrs_0.5.0 tzdb_0.3.0 cellranger_1.1.0 ## [76] polyclip_1.10-0 gtable_0.3.0 assertthat_0.2.1 ## [79] ggforce_0.3.3 xfun_0.31 xtable_1.8-4 ## [82] broom_0.8.0 coda_0.19-4 survival_3.3-1 ## [85] googledrive_2.0.0 gargle_1.2.0 TH.data_1.1-1 ## [88] ellipsis_0.3.2 3.2 %not_in% This guide will also rely on this handy function, which you should add to your code: `%not_in%` &lt;- Negate(`%in%`) This simple operator allows you to determine if an element does not appear in a target object. 3.3 Import example file and metadata We will use a recently-collected data file and its corresponding metadata file to showcase the fundamentals of wrangling ephys data into a more easily plot-able format. 3.3.1 Identify files to import The following code is based on the assumptions that: 1) Your files are stored in a directory entitled /data 2) The basename of each file (i.e., the name of the file, excluding the file extension) is identical for each set of spike sorted data and corresponding metadata log file (e.g., 04132022_009m.mat and 04132022_009m have the same basename, which is 04132022_009m). ## List all files of each file type csv_files &lt;- list.files(&quot;./data&quot;, pattern = &quot;.csv&quot;, full.names = TRUE) mat_files &lt;- list.files(&quot;./data&quot;, pattern = &quot;.mat&quot;, full.names = TRUE) ## Generate metadata tibbles for each file type csv_file_info &lt;- tibble( csv_files = csv_files, ## Extract the basename by removing the file extension basename = basename(csv_files) %&gt;% str_remove(&quot;.csv&quot;), ## NOTE: PLEASE ADJUST THE FOLLOWING LINE TO BE ABLE TO EXCTRACT OUT THE ## DATE BASED ON YOUR NAMING CONVENTION basedate = basename(csv_files) %&gt;% str_sub(start = 1, end = 12) ) mat_file_info &lt;- tibble( mat_files = mat_files, ## Extract the basename by removing the file extension basename = basename(mat_files) %&gt;% str_remove(&quot;.mat&quot;), ## NOTE: AGAIN, PLEASE ADJUST THE FOLLOWING LINE TO BE ABLE TO EXCTRACT OUT ## THE DATE BASED ON YOUR NAMING CONVENTION basedate = basename(mat_files) %&gt;% str_sub(start = 1, end = 12) ) ## Matchmake between .MAT data and .CSV log files csv_mat_filejoin &lt;- inner_join(csv_file_info, mat_file_info, by = &quot;basename&quot;) %&gt;% ## OPTIONAL STEP: remove any rows where either the .MAT or .CSV is missing drop_na() ## Store a vector of basenames in the environment. This will become useful later base_names &lt;- csv_mat_filejoin$basename ## Your end products from this code block should look something like: csv_mat_filejoin ## # A tibble: 1 × 5 ## csv_files basename basedate.x mat_files basedate.y ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ./data/04132022_009m.csv 04132022_009m 04132022_009 ./data/0413202… 04132022_… ## and: base_names ## [1] &quot;04132022_009m&quot; 3.3.2 Data import and preliminary labeling We will now use the R.matlab package to import the .mat file into R and then label the spike and photodiode time series based on the information in the .csv log file Because .mat files can be large, data import can take several minutes. ## Tidy up how R has been using RAM by running garbage collection gc() ## used (Mb) gc trigger (Mb) max used (Mb) ## Ncells 2525141 134.9 4715652 251.9 3601402 192.4 ## Vcells 4313966 33.0 10146329 77.5 6658626 50.9 ## Set up empty vectors that will collect sets of replicates that we will be ## splitting up metadata_sets &lt;- NULL meta_splits &lt;- NULL data_splits &lt;- NULL "],["raster-and-mean-spike-rate-plots.html", "Chapter 4 Raster and mean spike rate plots 4.1 Including Plots", " Chapter 4 Raster and mean spike rate plots This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 4.1 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["spatiotemporal-tuning.html", "Chapter 5 Spatiotemporal tuning 5.1 Including Plots", " Chapter 5 Spatiotemporal tuning This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 5.1 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["histological-verification.html", "Chapter 6 Histological verification 6.1 Including Plots", " Chapter 6 Histological verification This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 6.1 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
